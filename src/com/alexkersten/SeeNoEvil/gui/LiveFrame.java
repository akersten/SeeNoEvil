/*
 Project: SeeNoEvil
 File: LiveFrame.java (com.alexkersten.SeeNoEvil.gui)
 Author: Alex Kersten
 */

/*
 * LiveFrame.java
 *
 * Created on Aug 30, 2013, 11:34:13 PM
 */
package com.alexkersten.SeeNoEvil.gui;

import com.alexkersten.SeeNoEvil.extractors.JPEGExtractor;
import com.alexkersten.SeeNoEvil.parser.PCAPFile;
import com.alexkersten.SeeNoEvil.parser.PCAPPacket;
import java.awt.Component;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;


/**
 *
 * @author Alex
 */
@SuppressWarnings("serial")
public class LiveFrame extends javax.swing.JFrame {

    private final PCAPFile pcapFile;

    /**
     * Creates new form LiveFrame
     */
    public LiveFrame(PCAPFile pcapFile) {
        this.pcapFile = pcapFile;

        initComponents();
        try {
            setIconImage(ImageIO.read(
                    this.getClass().getResource("icon16.png")));
        } catch (Exception e) {
            System.err.println("Can't load frame icon.");
        }

        this.setLocationRelativeTo(null);

        imageList.setModel(new DefaultListModel());
        
        //Create the thread which will update us.
        new LiveModeUpdater(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        imageList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Live Mode");

        jSplitPane1.setDividerLocation(135);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Packet Info"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(imageList);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList imageList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pcapFile
     */
    public PCAPFile getPcapFile() {
        return pcapFile;
    }

    /**
     * @return the imageList
     */
    public javax.swing.JList getImageList() {
        return imageList;
    }
}
class LiveModeUpdater implements Runnable {

    LiveFrame host;

    LiveModeUpdater(LiveFrame host) {
        this.host = host;
        new Thread(this).start();
    }

    @Override
    public void run() {
        while (true) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException ie) {

                break;
            }

            //See if more images are available, if so, add them to the list.
            try {
                while (host.getPcapFile().hasNext()) {
                    PCAPPacket p = host.getPcapFile().getNext();
                    if (JPEGExtractor.packetHasJFIF(p)) {
                        System.out.println("Packet with JFIF!");
                        JLabel img = new JLabel(p.getTime() + "");
                        img.setIcon(new ImageIcon(JPEGExtractor.getJFIFFromPacket(p)));
                        ((DefaultListModel)host.getImageList().getModel()).add(0, img);
                    }
                }
            } catch (IOException ioe) {
                break;
            }
        }
    }
}

class ImageRenderer extends JLabel implements ListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
         int selectedIndex = ((Integer)value).intValue();

        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        //Set the icon and text.  If icon was null, say so.
        
        return this;
    }
    
}